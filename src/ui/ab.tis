var selectTags = [];
var ab = { tags: [], peers: []};
var abLoading;
var abError;
var current_menu_peer_id = '';

class AddressBook: Reactor.Component
{
    this var style;
    this var selectedTags = function() {
        var tags = handler.get_local_option("selected-tags");
        if (tags) return tags.split(",");
        return [];
    }();
    
    function render() {
        return "";
    }


    function getPeers() {
        var peers = [];
        return peers;
    }
}

class SelectTags: Reactor.Component {
    function this(params) {
        selectTags = this;
        this.tags = params.tags;
    }
    
    function render() {
        return "";
    }

    event click $(#tags span) (_, me) {
        me.attributes.toggleClass('active');
        var i = this.tags.indexOf(me.text);
        if (i < 0) {
            this.tags.push(me.text);
        } else {
            this.tags.splice(i, 1);
        }
    }
}

var svg_tile = <svg #session-tile viewBox="0 0 158.6 158.6"><path style="stroke-width:.309756" d="M5.4 157.7c-1-.3-2-1-3.2-2.1-2.8-2.8-2.6-1-2.5-32 0-26.7 0-27 .7-28.3a9.3 9.3 0 0 1 4-4.2c1.2-.6 2.3-.6 29-.7 27.5 0 27.6 0 29.1.6.8.4 2 1.2 2.7 2 2.4 2.5 2.3.7 2.2 31.6-.1 26.5-.1 27.6-.7 28.8a9.3 9.3 0 0 1-4.2 4c-1.4.6-1.6.6-28.5.7a235 235 0 0 1-28.6-.4zm91 0a8.5 8.5 0 0 1-5.7-5.4c-.2-.7-.3-8.3-.3-28.3V96.7l.7-1.6a8.9 8.9 0 0 1 4.6-4.3c1.2-.4 3.8-.5 28.9-.4 26.6.1 27.6.1 28.8.7 1.6.8 3.2 2.5 4 4.2.7 1.4.7 1.6.7 28.3.1 31 .3 29.2-2.5 32-2.8 2.7-1 2.6-31.4 2.6-21.4 0-26.8-.1-27.9-.5zM5.3 67a8.7 8.7 0 0 1-4-3C-.5 61.6-.5 62.3-.5 33.6-.4 3.2-.5 5 2.2 2.2 5-.6 3.2-.4 34.2-.3c26.7 0 27 0 28.3.7 1.7.8 3.4 2.4 4.2 4 .6 1.2.6 2.2.7 28.8 0 25.1 0 27.7-.4 29a9 9 0 0 1-4.3 4.5l-1.6.7H33.7c-20.2 0-27.7-.1-28.4-.4Zm89.8-.3a9 9 0 0 1-4.3-4.6c-.5-1.2-.5-3.8-.5-28.9.1-26.6.2-27.6.7-28.8a9.3 9.3 0 0 1 4.2-4c1.4-.7 1.6-.7 28.3-.7 31-.1 29.2-.3 32 2.5 2.8 2.8 2.6 1 2.5 32 0 26.7 0 26.9-.7 28.3a9.3 9.3 0 0 1-4 4.2c-1.2.5-2.2.6-29 .6l-27.7.1z" transform="translate(.4 .4)"/></svg>;
var svg_list = <svg #session-list viewBox="0 0 246.8 185.8"><path style="stroke-width:.482473" d="M-69.2 102.7A16.5 16.5 0 0 1-67 70.4c7.3-1 15 4 17.3 11 1 3 1 8 0 10.8a16.7 16.7 0 0 1-19.5 10.5zm53-3.4a12.3 12.3 0 0 1-7-16.8c1.3-3 3.1-4.7 6-6 2.2-1 2.8-1 87.2-1 92.4 0 87-.2 90.6 2.6.9.7 2.2 2.4 3 3.7 1.2 2.2 1.4 3.1 1.4 6 0 4.8-2.3 8.6-6.8 11l-1.9 1-85.2.1c-71.9 0-85.5 0-87.3-.6zm-53.5-73c-4.7-1.5-8.6-5-10.6-9.1-1.8-4-1.8-9.8 0-13.7 1.6-3.3 4.4-6.2 7.8-8 2.2-1.2 3-1.3 7.1-1.3 4 0 5 .1 7.3 1.3a16.6 16.6 0 0 1 0 29.6c-2 1-3.4 1.4-6.5 1.5-2.2 0-4.5 0-5.1-.3zm52.3-4.8c-2.4-1.1-5.3-4-6.2-6.5-1-2.4-1-7.3.1-9.7.5-1.1 1.8-2.8 2.8-3.8 3.7-3.5-4-3.2 91-3.2h85.5l2.5 1.1a12 12 0 0 1 0 21.8l-2.5 1.2H70.2c-82.5 0-85.7 0-87.6-1zm-52.1-71.6a18 18 0 0 1-10-7.7 17 17 0 0 1-.7-15c2.3-5 5.8-7.9 11.4-9.3 9-2.3 18.3 4 19.8 13.4a16.4 16.4 0 0 1-15.2 19c-2.1.1-4.1 0-5.3-.4zm52.1-5.9c-1.3-.6-3-1.7-3.7-2.5-4.7-5-4.2-13.7 1-18 3.7-3.1-1.8-3 91.5-2.8l84.9.1 2 1a12 12 0 0 1 6.7 11c0 3-.2 3.9-1.4 6-.8 1.4-2.1 3-3 3.8-3.7 2.7 1.8 2.6-90.6 2.6h-85l-2.4-1.2z" transform="translate(81.7 82.6)"/></svg>;
var search_icon = <svg viewBox="0 0 655.278 655.024"><g transform="translate(-24.497 -195.01)"><path d="m649.96 847.92c-2.9592-1.3629-27.183-24.243-63.36-59.846-32.213-31.702-70.814-69.663-85.78-84.357l-27.21-26.717-4.7897 3.5287c-66.337 48.872-145.32 66.878-224.31 51.138-72.966-14.539-136.58-58.184-178.47-122.44-15.945-24.462-30.723-61.471-36.413-91.191-8.9404-46.696-6.2422-90.39 8.3388-135.04 13.39-41.003 34.756-75.42 66.479-107.09 74.506-74.377 183.71-99.89 284.22-66.397 62.352 20.777 117.67 65.579 150.79 122.12 38.716 66.101 46.59 147.55 21.43 221.66-9.9038 29.171-29.788 63.725-49.916 86.743l-7.0583 8.0717 3.0992 2.919c1.7046 1.6054 40.675 39.928 86.602 85.161 89.007 87.664 87.558 86.034 85.619 96.293-1.2888 6.8209-5.2313 12.041-11.321 14.989-6.7901 3.287-11.55 3.4093-17.952 0.46117zm-316.64-154.63c32.373-5.0481 61.075-15.115 86.553-30.358 47.942-28.683 83.505-72.09 100.89-123.14 35.043-102.91-6.4362-214.07-100.89-270.37-52.514-31.302-117.76-40.564-178.06-25.277-81.183 20.579-145.19 82.918-166.86 162.52-5.5757 20.478-7.445 35.423-7.445 59.52s1.8693 39.042 7.445 59.52c21.409 78.63 85.366 141.52 164.81 162.05 29.22 7.5511 66.493 9.756 93.564 5.5347z" stroke-width="1.28"/></g></svg>;
var clear_icon = <svg viewBox="0 0 478.94 479.03"><path d="M217.488 478.45c-30.264-3.146-55.348-10.265-82.714-23.477C62.54 420.1 14.214 353.763 1.824 272.463c-2.412-15.82-2.434-50.027-.043-66.058 16.004-107.32 97.008-188.28 204.71-204.6 14.33-2.172 49.054-2.447 63-.498C323.95 8.915 371.3 32.2 409.03 69.927c37.697 37.698 61.125 85.349 68.605 139.54 1.943 14.08 1.68 48.804-.478 63-6.616 43.533-24.01 83.859-50.468 117-37.556 47.046-92.812 78.608-153.26 87.54-12.553 1.855-44.144 2.671-55.936 1.445zm42.144-32.045c15.649-1.602 29.895-4.63 44.856-9.531 78.146-25.604 133.49-94.718 141.94-177.26 6.245-60.993-16.1-123.3-59.94-167.14-55.797-55.797-139.4-75.365-213.52-49.98-77.69 26.609-131.51 94.14-140.42 176.19-4.761 43.843 6.392 91.899 30.274 130.44 41.468 66.926 119.01 105.26 196.82 97.29zm-138.69-80.346c-4.096-1.784-8.225-6.874-9.022-11.123-1.676-8.935-3.495-6.761 52.877-63.221l52.17-52.25-52.17-52.25c-56.544-56.632-54.56-54.249-52.834-63.451.924-4.923 6.905-10.904 11.828-11.828 9.201-1.726 6.819-3.71 63.451 52.834l52.25 52.169 52.25-52.169c56.632-56.544 54.25-54.56 63.451-52.834 4.923.923 10.904 6.905 11.828 11.828 1.726 9.201 3.71 6.818-52.834 63.451l-52.169 52.25 52.17 52.25c56.543 56.632 54.56 54.249 52.833 63.451-.923 4.923-6.905 10.904-11.828 11.828-9.201 1.726-6.818 3.71-63.455-52.838l-52.255-52.173-51.745 51.696c-28.496 28.469-53.01 52.166-54.56 52.742-3.766 1.4-8.515 1.26-12.234-.36z"/></svg>;

function getSessionsStyleOption(type) {
    return (type || "recent") + "-sessions-style";
}

function getSessionsStyle(type) {
    var v = handler.get_local_option(getSessionsStyleOption(type));
    if (!v) v = type == "ab" ? "list" : "tile";
    return v;
}

var searchPatterns = {};

class SearchBar: Reactor.Component {
    this var type = "";

    function this(params) {
        this.type = (params || {}).type || "";
    }

    function render() {
        return "";
    }

    event click $(span.clear-input) {
        this.onChange('');
    }

    event change $(input) (_, el) {
        return;
    }
    
    function onChange(v) {
        return;
    }
}

class SessionStyle: Reactor.Component {
    this var type = ""; 

    function this(params) {
        this.type = (params || {}).type || "";
    }

    function render() {
        return "";
    }

}

class SessionList: Reactor.Component {
    this var sessions = [];
    this var type = "";
    this var style;
    
    function this(params) {
        this.sessions = params.sessions;
        this.type = params.type || "";
        this.style = getSessionsStyle(this.type);
    }

    function render() {
        return "";
    }

    function getSession(s) {
        return "";
    }
}

function getSessionsType() {
    return handler.get_local_option("show-sessions-type");
}

class Favorites: Reactor.Component {
    function render() {
        return "";
    }
}

class MultipleSessions: Reactor.Component {
    function render() {
        return  "";
    }

    function stupidUpdate() {
    }
    function onSize() {
        var w = this.$(.sessions-bar .sessions-tab).box(#width);
        var len = translate('Recent sessions').length;
        var totalChars = 0;
        var nEle = 0;
        for (var el in this.$$(#sessions-type span)) {
            nEle += 1;
            totalChars += el.text.length;
        }
        for (var el in this.$$(#sessions-type span)) {
            var maxWidth = (w - nEle * 2 * 8) * el.text.length / totalChars;
            if (maxWidth < 0) maxWidth = 36;
            el.style.set{
                "max-width": maxWidth + "px",
            };
        }
    }
}

function discover() {
	return;
    handler.discover();
    var tries = 15;
    function update() {
        self.timer(300ms, function() {
            tries -= 1;
            if (tries == 0) return;
            update();
            var p = (app || {}).multipleSessions;
            if (p) {
                p.update();
            }
        });
    }
    update();
}

if (getSessionsType() == "lan" && handler.is_installed()) {
    discover();
}

class LanPeers: Reactor.Component {
    function render() {
        var sessions = [];
        try {
            sessions = JSON.parse(handler.get_lan_peers());
        } catch (_) {}
        return <SessionList sessions={sessions} type="lan" />;
    }
}

view.on("size", function() { if (app && app.multipleSessions) app.multipleSessions.onSize(); });

/*
{
    peers: [{id: "abcd", username: "", hostname: "", platform: "", alias: "", tags: ["", "", ...]}, ...],
    tags: [],
}
*/

function handleAbError(err) {
    abLoading = false;
    err = translate(err);
    stderr.println(err);
    abError = err;
    app.update();
}

function getAb() {
	return;
}

function updateAb() {
	return;
    httpRequest(handler.get_api_server() + "/api/ab", #post, { data: JSON.stringify(ab) }, function(data) {
    }, function(err, status) {
    }, getHttpHeaders());
}

function resetAb() {
	return;
}

function updateAbPeer() {
	return;
}

var is_edit_rdp_port;
class EditRdpPort: Reactor.Component {
    function render() {
        return <span style="margin-left: 12px; padding: 0 6px; display: inline-block;" .link>{svg_edit}</span>;
    }

    function onMouse(evt) {
        if (evt.type == Event.MOUSE_DOWN) {
            is_edit_rdp_port = true;
            editRdpPort();
        }
    }
}

function editRdpPort() {
	return;
}
